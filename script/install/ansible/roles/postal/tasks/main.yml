---
- name: Postal - Install packages required to build ruby (RedHat).
  yum: "name={{ item }} state=present"
  with_items:
    - wget
    - nano
    - mysql-devel
  when: ansible_os_family == 'RedHat'

- name: Postal - Update apt cache (Debian).
  apt: update_cache=yes cache_valid_time=86400
  when: ansible_os_family == 'Debian'

- name: Postal - Install packages required to build ruby (Debian).
  apt: "name={{ item }} state=present"
  with_items:
    - wget
    - nano
    - libmysqlclient-dev
  when: ansible_os_family == 'Debian'




# MySQL [0]
- name: Postal - Create MySQL postal databse
  mysql_db:
    login_user: root
    login_password: "{{ mysql_root_password }}"
    name: postal
    state: present
    encoding: utf8

# MySQL [1-2]
- name: Postal - Set MySQL postal user privileges
  mysql_user:
    name: postal
    password: "{{ postal_mysql_password }}"
    priv: "postal.*:ALL/postal-%.*:ALL PRIVILEGES" # "postal.*:ALL/postal-%.*:ALL PRIVILEGES,GRANT
    state: present




# RabbitMQ [0]
- name: Postal - RabbitMQ add vhost postal
  shell: add_vhost /postal
  args:
    executable: /usr/sbin/rabbitmqctl
  register: command_result
  failed_when: "'FAILED' in command_result.stderr"
- debug: var=command_result.stdout_lines

# RabbitMQ [1]
- name: Postal - RabbitMQ add user postal
  shell: add_user postal "{{ postal_mysql_password }}"
  args:
    executable: /usr/sbin/rabbitmqctl
  register: command_result
  failed_when: "'FAILED' in command_result.stderr"
- debug: var=command_result.stdout_lines

# RabbitMQ [2]
- name: Postal - RabbitMQ set permissions postal
  shell: set_permissions -p /postal postal ".*" ".*" ".*"
  args:
    executable: /usr/sbin/rabbitmqctl
  register: command_result
  failed_when: "'FAILED' in command_result.stderr"
- debug: var=command_result.stdout_lines





# System prep [0]
- name: Postal - Add System User
  shell: useradd -r -m -d /opt/postal -s /bin/bash postal
  args:
    executable: /bin/bash
  register: command_result
  failed_when: "'FAILED' in command_result.stderr"
- debug: var=command_result.stdout_lines

# System prep [1]
- name: Postal - Allow ruby privileged ports without root
  shell: |
    setcap 'cap_net_bind_service=+ep' $(which ruby) # /usr/local/bin/ruby
  args:
    executable: /bin/bash
  register: command_result
  failed_when: "'FAILED' in command_result.stderr"
- debug: var=command_result.stdout_lines




# Application Setup [0]
- name: Postal - Create App Directory
  file:
      path: /opt/postal/app
      state: directory
      owner: www-data
      group: www-data
      mode: 0775
      recurse: yes

# Application Setup [1]
- name: Postal - Download App
  shell: wget https://postal.atech.media/packages/stable/latest.tgz -O - --no-check-certificate | tar zxpv -C /opt/postal/app
  args:
    executable: /bin/bash
  become: yes
  become_user: postal
  register: command_result
  failed_when: "'FAILED' in command_result.stderr"
- debug: var=command_result.stdout_lines

# Application Setup [2]
- name: Postal - Hard Link Postal
  shell: ln -s /opt/postal/app/bin/postal /usr/bin/postal
  args:
    executable: /bin/bash
  become: yes
  become_user: postal
  register: command_result
  failed_when: "'FAILED' in command_result.stderr"
- debug: var=command_result.stdout_lines

# Application Setup [3]
- name: Postal - Bundle
  shell: bundle /opt/postal/vendor/bundle
  args:
    executable: /usr/bin/postal
  become: yes
  become_user: postal
  register: command_result
  failed_when: "'FAILED' in command_result.stderr"
- debug: var=command_result.stdout_lines

# Application Setup [4]
- name: Postal - Initialize Config
  shell: initialize-config
  args:
    executable: /usr/bin/postal
  become: yes
  become_user: postal
  register: command_result
  failed_when: "'FAILED' in command_result.stderr"
- debug: var=command_result.stdout_lines

# Application Setup [5]
- name: Postal - Initialize
  shell: initialize
  args:
    executable: /usr/bin/postal
  become: yes
  become_user: postal
  register: command_result
  failed_when: "'FAILED' in command_result.stderr"
- debug: var=command_result.stdout_lines

# Application Setup [6]
- name: Postal - Start
  shell: start
  args:
    executable: /usr/bin/postal
  become: yes
  become_user: postal
  register: command_result
  failed_when: "'FAILED' in command_result.stderr"
- debug: var=command_result.stdout_lines




- name: Postal - Generate ssl_dhparam for Nginx
  shell: openssl dhparam -dsaparam 4096 -out /etc/ssl/dhparam.pem
  args:
    executable: /bin/bash
  register: command_result
  failed_when: "'FAILED' in command_result.stderr"
- debug: var=command_result.stdout_lines